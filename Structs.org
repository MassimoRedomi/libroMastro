* structures
  Le strutture sono gruppi di variabili che rapressentano un
 oggetto della vita reale.
** Configurazione
   questa struttura solo serve per avere un archivio di dati ordinati
   dei dati letti del file di configurazione. questi dati sono:
|---------------------------------------+------------------------------------------------------------------------------------------------------------------|
| variable                              | description                                                                                                      |
|---------------------------------------+------------------------------------------------------------------------------------------------------------------|
| SO_USERS_NUM                          | numero di processi utente                                                                                        |
| SO_NODES_NUM                          | numero di processi nodo                                                                                          |
| SO_BUDGET_INIT                        | budget iniziale di ciascun processo utente                                                                       |
| SO_REWARD                             | la percentuale di reward pagata da ogni utente per il processamento di una transazione                           |
| SO_MIN_TRANS_GEN_NSEC                 | minimo valore del tempo che trascorre fra la generazione di una transazione e la seguente da parte di un utente  |
| SO_MAX_TRANS_GEN_NSEC                 | massimo valore del tempo che trascorre fra la generazione di una transazione e la seguente da parte di un utente |
| SO_RETRY                              | numero massimo di fallimenti consecutivi nella generazione di transazioni dopo cui un processo utente termina    |
| SO_TP_SIZE                            | numero massimo di transazioni nella transaction pool dei processi nodo                                           |
| SO_BLOCK_SIZE                         | numero di transazioni contenute in un blocco                                                                     |
| SO_MIN_TRANS_PROC_NSEC,               | minimo valore del tempo simulato(nanosecondi) di processamento di un blocco da parte di un nodo                  |
| SO_MAX_TRANS_PROC_NSEC                | massimo valore del tempo simulato(nanosecondi) di processamento di un blocco da parte di un nodo                 |
| SO_REGISTRY_SIZE                      | numero massimo di blocchi nel libro mastro.                                                                      |
| SO_SIM_SESC                           | durata della simulazione                                                                                         |
| SO_NUM_FRIENDS (solo versione max 30) | numero di nodi amici dei processi nodo (solo per la versione full)                                               |
| SO_HOPS (solo versione max 30)        | numero massimo di inoltri di una transazione verso nodi amici prima che il master creai un nuovo nodo            |
|---------------------------------------+------------------------------------------------------------------------------------------------------------------|
   Anche e' vero che si poteva leggere tutte le variabili senza metterlo
   in una sola struttura. ma mi sembra molto piu ordinato mettendo tutto 
   cosi.
#+begin_src c :tangle yes

/*struttura della configurazione.*/
typedef struct Configurazione{
   int SO_USERS_NUM;          /*numero di processi utente*/
   int SO_NODES_NUM;          /*numero di processi nodo*/
   int SO_BUDGET_INIT;        /*budget iniziale di ciascun processo utente*/
   int SO_REWARD;             /*la percentuale di reward pagata da ogni utente per il processamento di una transazione*/
   int SO_MIN_TRANS_GEN_NSEC; /*minimo valore del tempo che trascorre fra la generazione di una transazione e la seguente da parte di un utente*/
   int SO_MAX_TRANS_GEN_NSEC; /*massimo valore del tempo che trascorre fra la generazione di una transazione e la seguente da parte di un utente*/
   int SO_RETRY;              /*numero massimo di fallimenti consecutivi nella generazione di transazioni dopo cui un processo utente termina*/
   int SO_TP_SIZE;            /*numero massimo di transazioni nella transaction pool dei processi nodo*/
   int SO_MIN_TRANS_PROC_NSEC;/*minimo valore del tempo simulato(nanosecondi) di processamento di un blocco da parte di un nodo*/
   int SO_MAX_TRANS_PROC_NSEC;/*massimo valore del tempo simulato(nanosecondi) di processamento di un blocco da parte di un nodo*/
   int SO_SIM_SEC;            /*durata della simulazione*/
   int SO_FRIENDS_NUM;        /*solo per la versione full. numero di nodi amici dei processi nodo (solo per la versione full)*/
   int SO_HOPS;               /*solo per la versione full. numero massimo di inoltri di una transazione verso nodi amici prima che il master creai un nuovo nodo*/ 
}Configurazione;

#+end_src
   Questa struttura è gia dichiarata con la variabile _configurazione_ 
   perche solo c'è una lettura delle variabili di configurazione.

** Transazione
  Una transazione è caratterizzata dalle seguenti informazioni:
|-----------+--------------------------------------------------------|
| varlabile | descrizione                                            |
|-----------+--------------------------------------------------------|
| timestamp | Quando viene effettuata la transazione.                |
| sender    | Utente che ha generato la transazione.                 |
| receiver  | Utente destinatario de la somma.                       |
| Quantita  | Quantita di denaro inviata.                            |
| reward    | denaro dal sender al nodo che processa la transazione. |
|-----------+--------------------------------------------------------|

  La transazione è inviata dal processo utente che la genera ad uno 
  dei processi nodo, scelto a caso.
  #+begin_src c :tangle yes
/*struttura della configurazione.*/
typedef struct Transazione{
   double timestamp;/*Quando viene effettuata la transazione.*/
   int sender;      /*Utente che ha generato la transazione.*/
   int receiver;    /*Utente destinatario de la somma.*/
   int quantita;    /*Quantita di denaro inviata.*/
   int reward;      /*denaro dal sender al nodo che processa la transazione.*/
}Transazione;

  #+end_src

** printTrans
#+begin_src c :tangle yes

void prinTrans(Transazione t){
   printf("%f: %d %d %d\n",t.timestamp,t.sender,t.receiver,t.quantita);
}
#+end_src
** RandomInt & RandomLong
   Le due funzioni servono per lanciare un numero aleatorio tra min e 
   max. In ogni caso si usano le stesse variabili:
   -_min_:il numero minimo del rango.
   -_max_:il numero massimo del rango.

   _randomInt_ serve per simplificare ogni volta che si fa una scelta a 
   caso dentro di ogni thread.
   _randomlong_ per ora solo serve per il random sleep.
   #+begin_src c :tangle yes
int randomInt(int min, int max){
     return rand() % max +min;
}

long randomlong(int min, int max){
     return (long)(rand() % max +min);
}
   #+end_src
** randomSleep
   funzione di nanosleep con un rango tra due numeri:
   _min_
   #+begin_src c :tangle yes
/*si ferma per una quantita random di nano secondi*/
void randomSleep(int min, int max){
    nanosleep((const struct timespec[]){{0,randomlong(min,max)}},NULL);
}
   #+end_src
